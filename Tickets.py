import threading
import requests
import xml.etree.ElementTree as ET
import telebot
import html
import schedule
import time
from telebot import types
import pickle
from cryptography.fernet import Fernet
import config

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
key = config.key

cipher_suite = Fernet(key)

# –ß–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
with open("encrypted_data.txt", "rb") as file:
    lines = file.readlines()
    encrypted_username = lines[0].strip()
    encrypted_password = lines[1].strip()
    encrypted_token = lines[2].strip()

# –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
decrypted_username = cipher_suite.decrypt(encrypted_username).decode()
decrypted_password = cipher_suite.decrypt(encrypted_password).decode()
decrypted_token = cipher_suite.decrypt(encrypted_token).decode()

bot_token = decrypted_token
# chat_id = '-1001847177692' #–¢–µ—Å—Ç–æ–≤—ã–π
# chat_id = '167749311' #–ú–æ–π
chat_id = '-1001836398372'

bot = telebot.TeleBot(bot_token)

url = 'http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API'
session_id = None
usertick = {"tg_id": ["tickets"]}

try:
    with open('processed_tickets.pkl', 'rb') as f:
        processed_tickets = pickle.load(f)
except FileNotFoundError:
    processed_tickets = set()


def tickets():
    # –°–æ–∑–¥–∞–Ω–∏–µ SOAP-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ TicketSearch —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Session ID
    ticket_search_request = f'''
    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns="http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API">
        <soap:Header/>
        <soap:Body>
            <tns:TicketSearch>
                <SessionID>{session_id}</SessionID>
                <State>new</State>
                <StateID>1</StateID>
                <StateType>new</StateType>
            </tns:TicketSearch>
        </soap:Body>
    </soap:Envelope>
    '''

    # –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP-–∑–∞–ø—Ä–æ—Å–∞ TicketSearch
    ticket_search_response = requests.post(url, data=ticket_search_request, headers={'Content-Type': 'text/xml'})

    # –ü–æ–ª—É—á–µ–Ω–∏–µ XML-–æ—Ç–≤–µ—Ç–∞ TicketSearch
    ticket_search_xml = ticket_search_response.content.decode()

    # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞
    root = ET.fromstring(ticket_search_xml)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ TicketID –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
    return root


def close_sessions(user_login):
    # –°–æ–∑–¥–∞–Ω–∏–µ SOAP-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ SessionClose
    session_close_request = f'''
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns="http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API">
       <soapenv:Header/>
       <soapenv:Body>
          <tns:SessionClose>
             <UserLogin>{user_login}</UserLogin>
          </tns:SessionClose>
       </soapenv:Body>
    </soapenv:Envelope>
    '''

    # –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP-–∑–∞–ø—Ä–æ—Å–∞ SessionClose
    headers = {'Content-Type': 'text/xml'}
    response = requests.post(url, data=session_close_request, headers=headers)
    print(response)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        session_close_xml = response.content.decode()
        root = ET.fromstring(session_close_xml)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        success_element = root.find('.//{http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API}Success')
        if success_element is not None and success_element.text == '1':
            print('–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π.')
        else:
            error_element = root.find('.//{http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API}Error')
            error_code = error_element.find(
                './/{http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API}ErrorCode').text
            error_message = error_element.find(
                './/{http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API}ErrorMessage').text
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–π. –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}, –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {error_message}')
    else:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SOAP-–∑–∞–ø—Ä–æ—Å–∞.')


@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button1 = types.KeyboardButton('/show_tickets')
    button2 = types.KeyboardButton('/show_my_tickets')
    keyboard.add(button1, button2)
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏.", reply_markup=keyboard)


@bot.message_handler(commands=['show_tickets'])
def show_tickets(message):
    try:
        root = tickets()
        namespace = {'tns': 'http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API'}
        ticket_ids = root.findall('.//tns:TicketID', namespace)
        if len(ticket_ids) > 0:
            for ticket_id in ticket_ids:
                ticket_get_request = f'''
                    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns="http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API">
                        <soap:Header/>
                        <soap:Body>
                            <tns:TicketGet>
                                <SessionID>{session_id}</SessionID>
                                <TicketID>{ticket_id.text}</TicketID>
                                <AllArticles>?</AllArticles>
                            </tns:TicketGet>
                        </soap:Body>
                    </soap:Envelope>
                    '''

                # –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP-–∑–∞–ø—Ä–æ—Å–∞ TicketGet
                ticket_get_response = requests.post(url, data=ticket_get_request, headers={'Content-Type': 'text/xml'})
                # print(ticket_get_response.text)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ XML-–æ—Ç–≤–µ—Ç–∞ TicketGet
                ticket_get_xml = ticket_get_response.content.decode()

                # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞ TicketGet
                ticket_root = ET.fromstring(ticket_get_xml)

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
                ticket_data = ticket_root.find('.//tns:Ticket', namespace)

                # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
                ticket_id = ticket_data.find('tns:TicketID', namespace).text
                created = ticket_data.find('tns:Created', namespace).text
                title = ticket_data.find('tns:Title', namespace).text
                body = ticket_data.find('tns:Article/tns:Body', namespace).text
                fromname = ticket_data.find('tns:Article/tns:FromRealname', namespace).text

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤
                ticket_id = html.escape(ticket_id)
                created = html.escape(created)
                title = html.escape(title) if title else ''
                body = html.escape(body)
                fromname = html.escape(fromname)

                message_text = f'<pre><b>üîî –ó–ê–Ø–í–ö–ê ‚Ññ{ticket_id}</b>\n\n</pre>' \
                               f'<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {fromname}\n\n' \
                               f'<b>–°–æ–∑–¥–∞–Ω–∞:</b> {created}\n\n' \
                               f'<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n\n' \
                               f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<pre>{body}</pre>'

                bot.send_message(message.chat.id, message_text, parse_mode='HTML')

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                processed_tickets.add(ticket_id)
                with open('processed_tickets.pkl', 'wb') as f:
                    pickle.dump(processed_tickets, f)

        else:
            bot.send_message(message.chat.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.')
            start_bot()

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        print(f"An error occurred: {e}")
        schedule.every(5).seconds.do(start_bot)


def check_new_tickets():
    try:
        global session_id, processed_tickets
        if session_id:
            root = tickets()
            namespace = {'tns': 'http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API'}
            ticket_ids = root.findall('.//tns:TicketID', namespace)

            if len(ticket_ids) > 0:
                for ticket_id in ticket_ids:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                    if ticket_id.text not in processed_tickets:
                        ticket_get_request = f'''
                            <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns="http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API">
                                <soap:Header/>
                                <soap:Body>
                                    <tns:TicketGet>
                                        <SessionID>{session_id}</SessionID>
                                        <TicketID>{ticket_id.text}</TicketID>
                                        <AllArticles>?</AllArticles>
                                    </tns:TicketGet>
                                </soap:Body>
                            </soap:Envelope>
                            '''

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP-–∑–∞–ø—Ä–æ—Å–∞ TicketGet
                        ticket_get_response = requests.post(url, data=ticket_get_request,
                                                            headers={'Content-Type': 'text/xml'})
                        # print(ticket_get_response.text)

                        # –ü–æ–ª—É—á–µ–Ω–∏–µ XML-–æ—Ç–≤–µ—Ç–∞ TicketGet
                        ticket_get_xml = ticket_get_response.content.decode()

                        # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞ TicketGet
                        ticket_root = ET.fromstring(ticket_get_xml)

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
                        ticket_data = ticket_root.find('.//tns:Ticket', namespace)

                        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
                        ticket_id = ticket_data.find('tns:TicketID', namespace).text
                        created = ticket_data.find('tns:Created', namespace).text
                        title = ticket_data.find('tns:Title', namespace).text
                        body = ticket_data.find('tns:Article/tns:Body', namespace).text
                        fromname = ticket_data.find('tns:Article/tns:FromRealname', namespace).text

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤
                        ticket_id = html.escape(ticket_id)
                        created = html.escape(created)
                        title = html.escape(title) if title else ''
                        body = html.escape(body)
                        fromname = html.escape(fromname)

                        message_text = f'<pre><b>üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê ‚Ññ{ticket_id}</b>\n\n</pre>' \
                                       f'<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {fromname}\n\n' \
                                       f'<b>–°–æ–∑–¥–∞–Ω–∞:</b> {created}\n\n' \
                                       f'<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n\n' \
                                       f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<pre>{body}</pre>'

                        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
                        accept_button = types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å',
                                                                   callback_data=f'accept_ticket:{ticket_id}')

                        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(accept_button)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                        bot.send_message(chat_id, message_text, reply_markup=keyboard, parse_mode='HTML')

                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                        processed_tickets.add(ticket_id)
                        with open('processed_tickets.pkl', 'wb') as f:
                            pickle.dump(processed_tickets, f)

            else:
                print('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.')
                start_bot()
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        print(f"An error occurred: {e}")
        schedule.every(5).seconds.do(start_bot)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    if call.data.startswith('accept_ticket:'):
        ticket_id = call.data.split(':')[1]
        user_id = call.from_user.id
        username = call.from_user.first_name

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
        message_text = call.message.html_text
        message_text += f'\n\n<b>–ü—Ä–∏–Ω—è–ª –≤ —Ä–∞–±–æ—Ç—É:</b> {username}'

        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=message_text,
                              parse_mode='HTML')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏
        # ...
        if user_id in usertick:
            usertick[user_id].append(ticket_id)
        else:
            usertick[user_id] = [ticket_id]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É ‚Ññ{ticket_id}')


def start_bot():
    global session_id
    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        close_sessions(decrypted_username)
        # –°–æ–∑–¥–∞–Ω–∏–µ SOAP-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ UserLogin
        user_login_request = f'''
        <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns="http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API">
            <soap:Header/>
            <soap:Body>
                <tns:SessionCreate>
                    <UserLogin>{decrypted_username}</UserLogin>
                    <Password>{decrypted_password}</Password>
                </tns:SessionCreate>
            </soap:Body>
        </soap:Envelope>
        '''

        # –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP-–∑–∞–ø—Ä–æ—Å–∞ UserLogin
        user_login_response = requests.post(url, data=user_login_request, headers={'Content-Type': 'text/xml'})

        # –ü–æ–ª—É—á–µ–Ω–∏–µ XML-–æ—Ç–≤–µ—Ç–∞ UserLogin
        user_login_xml = user_login_response.content.decode()

        # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞ UserLogin
        root = ET.fromstring(user_login_xml)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ SessionID –∏–∑ XML-–æ—Ç–≤–µ—Ç–∞
        namespace = {'tns': 'http://otrs.12kdc.loc/otrs/nph-genericinterface.pl/Webservice/API'}
        session_id_element = root.find('.//tns:SessionID', namespace)
        if session_id_element is not None:
            session_id = session_id_element.text
            print('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.')
        else:
            print('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')
            schedule.every(60).seconds.do(start_bot)

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        schedule.every(5).seconds.do(check_new_tickets)

        # –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        while True:
            schedule.run_pending()
            time.sleep(1)
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        schedule.every(60).seconds.do(start_bot)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
bot_thread = threading.Thread(target=bot.polling, daemon=True)
bot_thread.start()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    while True:
        try:
            start_bot()
        except Exception as e:
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
